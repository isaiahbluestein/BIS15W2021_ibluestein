theme(axis.title.x = element_text(hjust=0.5, size = 10)) +
theme(axis.title.y = element_blank()) +
theme(panel.grid = element_blank()) +
theme(legend.position = c(0.9, 0.3)) -> uso_map
ggsave(filename = "map.svg", device = "svg", plot = uso_map, height = 5, width = 7)
ggplot() +
geom_sf(data = ca_comp, size = 0.125)+
geom_sf(data = ca_cnty_comp, size = 0.125)+
geom_point(data = spiders, aes(longitude, latitude))+
labs(x = "Figure 1: Distribution of Usofila spiders")+
theme_minimal() +
theme(axis.text = element_blank()) +
theme(axis.title.x = element_text(hjust=0.5, size = 10)) +
theme(axis.title.y = element_blank()) +
theme(panel.grid = element_blank()) +
theme(legend.position = c(0.9, 0.3)) -> uso_map
ggsave(filename = "map.svg", device = "svg", plot = uso_map, height = 5, width = 7)
install.packages("svglite")
ggplot() +
geom_sf(data = ca_comp, size = 0.125)+
geom_sf(data = ca_cnty_comp, size = 0.125)+
geom_point(data = spiders, aes(longitude, latitude))+
labs(x = "Figure 1: Distribution of Usofila spiders")+
theme_minimal() +
theme(axis.text = element_blank()) +
theme(axis.title.x = element_text(hjust=0.5, size = 10)) +
theme(axis.title.y = element_blank()) +
theme(panel.grid = element_blank()) +
theme(legend.position = c(0.9, 0.3)) -> uso_map
ggsave(filename = "map.svg", device = "svg", plot = uso_map, height = 5, width = 7)
library(tidyverse)
library(here)
library(janitor)
library(ggmap)
library(svglite)
install.packages(c("lubridate", "tibble", "units"))
knitr::opts_chunk$set(echo = TRUE)
library(here)
library(tidyverse)
knitr::opts_chunk$set(echo = TRUE)
library(here)
library(tidyverse)
library(naniar)
library(janitor)
library(shiny)
library(paletteer)
library(ggmap)
library(rgeos)
library(rgdal)
library(devtools)
#turtles<-read.csv(here("Final Project","Turtle_data.csv"))
turtles<-read.csv("Turtle_data.csv")
turtles_tidy<-turtles%>%
na_if("")%>%
na_if("0")%>%
na_if("0.0")%>%
mutate(dead_alive_new=if_else(Dead_Alive=="alive","Alive",Dead_Alive))
library(lubridate)
turtles3<-turtles_tidy%>%
mutate(DateCapture_new=dmy(DateCapture))%>%
filter(!is.na(DateCapture_new))%>%
mutate(Capture_month=month(DateCapture_new))%>%
mutate(Capture_day=day(DateCapture_new))%>%
mutate(capture_week_day=wday(DateCapture_new))
head(turtles3)
turtles3%>%
select(Cap_Latitude,Cap_Longitude)%>%
summary()
cap_lat <- c(33.49, 38.41)
cap_long <- c(-79.08, -75.47)
bbox <- make_bbox(cap_long, cap_lat, f = 0.1)
cap_map_base <- get_map(bbox, maptype = "terrain-background", source = "stamen")
ggmap(cap_map_base)
ggmap(cap_map_base) +
geom_point(data = turtles3, aes(Cap_Longitude,Cap_Latitude,color=Species,shape=dead_alive_new), size = 2, alpha = 0.7) +
scale_color_brewer(palette = "Spectral")+
labs(x = "Longitude", y = "Latitude", title = "Capture Locations")
turtles3%>%
select(Rel_Latitude,Rel_Longitude)%>%
summary()
rel_lat <- c(27.82, 39)
rel_long <- c(-81.24, -70)
bbox2 <- make_bbox(rel_long, rel_lat, f = 0.05)
rel_map_base <- get_map(bbox2, maptype = "terrain-background", source = "stamen")
ggmap(rel_map_base)
ggmap(rel_map_base) +
geom_point(data = turtles3, aes(Rel_Longitude,Rel_Latitude,color=Species), size = 2, alpha = 0.7) +
scale_color_brewer(palette = "Spectral")+
labs(x = "Longitude", y = "Latitude", title = "Release Locations")
turtles3%>%
group_by(year)%>%
summarise(n())
turtles3%>%
group_by(year)%>%
ggplot(aes(x=year,fill=dead_alive_new))+
geom_bar(position = "dodge")+
scale_fill_brewer(palette = "Spectral")
turtles3%>%
group_by(Capture_month)%>%
summarise(n())
turtles3%>%
ggplot(aes(month(x=DateCapture_new,label=TRUE)))+
geom_bar(position = "dodge")+
labs(x = NULL,
y = "Number of Captures")
turtles3%>%
group_by(Capture_day)%>%
summarise(n())
turtles3%>%
ggplot(aes(day(x=DateCapture_new)))+
geom_bar()+
labs(x = NULL,
y = "Number of Captures")
turtles3%>%
group_by(capture_week_day)%>%
summarise(n())
turtles3%>%
ggplot(aes(wday(x=DateCapture_new,label=TRUE)))+
geom_bar()+
labs(x = NULL,
y = "Number of Captures")
turtles3%>%
group_by(year)%>%
mutate(mean_body_length=mean(SCL_tip,na.rm=T))%>%
ggplot(aes(x=year,y=mean_body_length,group=1,color=Species))+
geom_line()+
geom_point()+
facet_wrap(~Species)+
scale_color_brewer(palette = "Spectral")
turtles3%>%
ggplot(aes(x=Species,y=CCL_tip,color=Species))+
geom_boxplot()+
scale_color_brewer(palette = "Spectral")
turtles3%>%
filter(Gear!=""&Species!="")%>%
ggplot(aes(x=Gear,fill=Species))+
geom_bar(position = "dodge")+
labs(title = "Gear used for Different Species",x="Gear",y="Number Captured with Given Method")+
theme(axis.text.x = element_text(angle = 60,hjust = 1))+
scale_y_log10()+
scale_fill_brewer(palette = "Spectral")
turtles %>%
group_by(year) %>%
ggplot(aes(x = year, fill = Cap_Region))+
geom_bar()+
labs(title = "Turtle Capture by Location",
x = "Year",
y= "n")+
theme_linedraw()+
theme(axis.text.x = element_text(angle = 60, hjust = 1), plot.title = element_text(size = rel(1.5), hjust = 0.5))
#Bias data because I'm excluding NAs
turtles %>%
mutate(mass_category = case_when(Weight <= 30 ~ "small", Weight >= 30 ~ "large")) %>%
group_by(year) %>%
filter(Weight != "NA") %>%
ggplot(aes(x = year, fill = mass_category))+
geom_bar()+
labs(title = "Turtle Capture by Weight Class",
x = "Year",
y= "n")+
theme_linedraw()+
theme(axis.text.x = element_text(angle = 60, hjust = 1), plot.title = element_text(size = rel(1.5), hjust = 0.5))+
scale_fill_brewer(palette = "Spectral")
rel_lat <- c(27.82, 39)
rel_long <- c(-81.24, -36.03)
bbox2 <- make_bbox(rel_long, rel_lat, f = 0.05)
rel_map_base <- get_map(bbox2, maptype = "terrain-background", source = "stamen")
ggmap(rel_map_base)
#map with outlying release points excluded
ggmap(rel_map_base) +
geom_point(data = turtles3, aes(Rel_Longitude,Rel_Latitude,color=Species), size = 2, alpha = 0.7) +
scale_color_brewer(palette = "Spectral")+
labs(x = "Longitude", y = "Latitude", title = "Release Locations")
rel_lat <- c(27.82, 39)
rel_long <- c(-81.24, -70)
bbox2 <- make_bbox(rel_long, rel_lat, f = 0.05)
rel_map_base <- get_map(bbox2, maptype = "terrain-background", source = "stamen")
ggmap(rel_map_base)
rel_map_base <- get_map(bbox2, maptype = "terrain-background", source = "stamen")
ggmap(rel_map_base)
#map with outlying release points excluded
ggmap(rel_map_base) +
geom_point(data = turtles3, aes(Rel_Longitude,Rel_Latitude,color=Species), size = 2, alpha = 0.7) +
scale_color_brewer(palette = "Spectral")+
labs(x = "Longitude", y = "Latitude", title = "Release Locations")
turtles3%>%
group_by(year)%>%
ggplot(aes(x=year,fill=dead_alive_new))+
geom_bar(position = "dodge")+
scale_fill_brewer(palette = "paired")
turtles3%>%
group_by(year)%>%
ggplot(aes(x=year,fill=dead_alive_new))+
geom_bar(position = "dodge")+
turtles3%>%
group_by(year)%>%
ggplot(aes(x=year,fill=dead_alive_new))+
geom_bar(position = "dodge")
turtles %>%
group_by(year) %>%
ggplot(aes(x = year, fill = Cap_Region))+
geom_bar()+
labs(title = "Turtle Capture by Location",
x = "Year",
y= "n")+
theme_linedraw()+
turtles %>%
group_by(year) %>%
ggplot(aes(x = year, fill = Cap_Region))+
geom_bar()+
labs(title = "Turtle Capture by Location",
x = "Year",
y= "n")+
theme_linedraw()
turtles %>%
group_by(year) %>%
ggplot(aes(x = year, fill = Cap_Region))+
geom_bar()+
labs(title = "Turtle Capture by Location",
x = "Year",
y= "n")+
theme_linedraw()+
theme(axis.text.x = element_text(angle = 60, hjust = 1), plot.title = element_text(size = rel(1.5), hjust = 0.5))
#Bias data because I'm excluding NAs
turtles %>%
mutate(mass_category = case_when(Weight <= 30 ~ "small", Weight >= 30 ~ "large")) %>%
group_by(year) %>%
filter(Weight != "NA") %>%
ggplot(aes(x = year, fill = mass_category))+
geom_bar()+
labs(title = "Turtle Capture by Weight Class",
x = "Year",
y= "n")+
theme_linedraw()+
theme(axis.text.x = element_text(angle = 60, hjust = 1), plot.title = element_text(size = rel(1.5), hjust = 0.5))
knitr::opts_chunk$set(echo = TRUE)
library(here)
library(tidyverse)
library(naniar)
library(janitor)
library(shiny)
library(paletteer)
library(ggmap)
library(rgeos)
library(rgdal)
library(devtools)
ggmap(cap_map_base) +
<<<<<<< Updated upstream
cap_map_base <- get_map(bbox, maptype = "terrain-background", source = "stamen")
ggmap(cap_map_base)
ggmap(cap_map_base) +
<<<<<<< Updated upstream
knitr::opts_chunk$set(echo = TRUE)
if (!require("tidyverse")) install.packages('tidyverse')
library(tidyverse)
library(shiny)
library(shinydashboard)
library(RColorBrewer)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(shiny)
library(shinydashboard)
library(RColorBrewer)
if (!require("tidyverse")) install.packages('tidyverse')
UC_admit <- readr::read_csv("data/UC_admit.csv")
UC_admit %>%
naniar::miss_var_summary()
UC_admit_clean <- clean_names(UC_admit)
library(tidyverse)
library(shiny)
library(shinydashboard)
library(RColorBrewer)
UC_admit_clean <- clean_names(UC_admit)
library(tidyverse)
library(shiny)
library(shinydashboard)
library(RColorBrewer)
library(janitor)
UC_admit %>%
naniar::miss_var_summary()
glimpse(UC_admit)
UC_admit_clean <- clean_names(UC_admit)
#The data is pretty clean. Some unknowns for ethnicity, but I didn't change them to NA's because I feel like Unknown is a little more informative.
UC_admit_clean$academic_yr <- as.factor(UC_admit_clean$academic_yr)
UC_admit_clean %>%
filter(ethnicity != "All") %>%
ggplot(aes(x = factor(academic_yr), y = filtered_count_fr, fill = ethnicity))+
geom_col(position = "dodge")+
theme_linedraw()+
scale_fill_brewer("BrBG")+
labs(title = "Ethnicity of UC Admissions", x = "Year", y = "n")
UC_admit_clean %>%
filter(ethnicity != "All") %>%
ggplot(aes(x = factor(academic_yr), y = filtered_count_fr, fill = ethnicity))+
geom_col(position = "dodge")+
theme_linedraw()+
scale_fill_brewer("Paired")+
labs(title = "Ethnicity of UC Admissions", x = "Year", y = "n")
UC_admit_clean %>%
filter(ethnicity != "All") %>%
ggplot(aes(x = factor(academic_yr), y = filtered_count_fr, fill = ethnicity))+
geom_col(position = "dodge")+
theme_linedraw()+
scale_fill_brewer("RdYlBu")+
labs(title = "Ethnicity of UC Admissions", x = "Year", y = "n")
ui <- fluidPage(
titlePanel("UC Campus Admissions"),
sidebarLayout(
sidebarPanel(
selectInput("x", "Select Admissions Variable", choices = c("academic_yr", "campus", "category"),
selected = "academic_yr"),
hr()),
mainPanel(
plotOutput("UCEthnicity")
)
)
)
server <- function(input, output) {
output$UCEthnicity <- renderPlot({
uc_admit %>%
filter(ethnicity != "All") %>%
ggplot(aes_string(x=input$x, y = "filtered_count_fr", fill = "ethnicity")) +
geom_col(position = "dodge")+
theme_minimal()+
scale_fill_manual(values = my_palette)+
labs(title = "UC Admissions Ethnicity", x = NULL, y = "Count")+
coord_flip()
})
}
shinyApp(ui, server)
UC_admit_clean %>%
filter(ethnicity != "All") %>%
ggplot(aes(x = factor(academic_yr), y = filtered_count_fr, fill = ethnicity))+
geom_col(position = "dodge")+
theme_linedraw()+
scale_fill_brewer(palette = "RdYlBu")+
labs(title = "Ethnicity of UC Admissions", x = "Year", y = "n")
UC_admit_clean %>%
filter(ethnicity != "All") %>%
ggplot(aes(x = factor(academic_yr), y = filtered_count_fr, fill = ethnicity))+
geom_col(position = "dodge")+
theme_linedraw()+
scale_fill_brewer(palette = "BrBG")+
labs(title = "Ethnicity of UC Admissions", x = "Year", y = "n")
UC_admit_clean %>%
filter(ethnicity != "All") %>%
ggplot(aes(x = factor(academic_yr), y = filtered_count_fr, fill = ethnicity))+
geom_col(position = "dodge")+
theme_linedraw()+
scale_fill_brewer(palette = "RdYlGn")+
labs(title = "Ethnicity of UC Admissions", x = "Year", y = "n")
UC_admit_clean %>%
filter(ethnicity != "All") %>%
ggplot(aes(x = factor(academic_yr), y = filtered_count_fr, fill = ethnicity))+
geom_col(position = "dodge")+
theme_linedraw()+
scale_fill_brewer(palette = "Set1")+
labs(title = "Ethnicity of UC Admissions", x = "Year", y = "n")
UC_admit_clean %>%
filter(ethnicity != "All") %>%
ggplot(aes(x = factor(academic_yr), y = filtered_count_fr, fill = ethnicity))+
geom_col(position = "dodge")+
theme_linedraw()+
scale_fill_brewer(palette = "Set3")+
labs(title = "Ethnicity of UC Admissions", x = "Year", y = "n")
UC_admit_clean %>%
filter(ethnicity != "All") %>%
ggplot(aes(x = factor(academic_yr), y = filtered_count_fr, fill = ethnicity))+
geom_col(position = "dodge")+
theme_linedraw()+
scale_fill_brewer(palette = "Set2")+
labs(title = "Ethnicity of UC Admissions", x = "Year", y = "n")
ui <- fluidPage(
titlePanel("UC Campus Admissions"),
sidebarLayout(
sidebarPanel(
selectInput("x", "Select Variable", choices = c("academic_yr", "campus", "category"),
selected = "academic_yr"),
hr()),
mainPanel(
plotOutput("UCEthnicity")
)
)
)
server <- function(input, output) {
output$UCEthnicity <- renderPlot({
UC_admit_clean %>%
filter(ethnicity != "All") %>%
ggplot(aes_string(x=input$x, y = "filtered_count_fr", fill = "ethnicity")) +
theme_linedraw()+
geom_col(position = "dodge")+
scale_fill_brewer(palette = "Set2")+
labs(title = "Ethnicity of UC Admissions", x = NULL, y = "Count")+
coord_flip()
})
}
shinyApp(ui, server)
ui <- fluidPage(
titlePanel("UC Campus Admissions"),
sidebarLayout(
sidebarPanel(
selectInput("x", "Select Variable", choices = c("academic_yr", "campus", "category"),
selected = "academic_yr"),
hr()),
mainPanel(
plotOutput("UCEthnicity")
)
)
)
server <- function(input, output) {
output$UCEthnicity <- renderPlot({
UC_admit_clean %>%
filter(ethnicity != "All") %>%
ggplot(aes_string(x=input$x, y = "filtered_count_fr", fill = "ethnicity")) +
theme_linedraw()+
geom_col(position = "dodge")+
scale_fill_brewer(palette = "Set2")+
labs(title = "Ethnicity of UC Admissions", x = NULL, y = "Count")+
coord_flip()
})
}
shinyApp(ui, server)
ui <- fluidPage(
titlePanel("UC Campus Admissions"),
sidebarLayout(
sidebarPanel(
selectInput("x", "Select Variable", choices = c("ethnicity", "campus", "category"),
selected = "ethnicity"),
hr()),
mainPanel(
plotOutput("UCAdmissions")
)
)
)
server <- function(input, output) {
output$UCAdmissions <- renderPlot({
UC_admit_clean %>%
filter(ethnicity != "All") %>%
ggplot(aes_string(x = "academic_yr", y = "filtered_count_fr", fill = input$x)) +
geom_col(position = "dodge")+
theme_linedraw()+
scale_fill_brewer(palette = "Set2")+
labs(title = "UC Admissions by Year", x = input$x, y= "count")
})
}
shinyApp(ui, server)
library(tidyverse)
library(ggmap)
library(lubridate)
x <- 0                 # Preliminary specification of data object
repeat{                # Head of repeat-loop
x <- x + 1           # Body of repeat-loop
print(x)
if(x >= 10) {        # Break condition of repeat-loop
break
}
}
data <- data.frame(x1 = 1:5,      # Create example data
x2 = 6:10,
x3 = 11:15)
data
data1 <- data                   # Replicate example data
i <- 1                          # Create running index
repeat{                         # Start repeat-loop
data1[ , i] <- data1[ , i] + 100
i <- i + 1
if(i > 2) {
break
}
}
data1
#?iris
data(iris)                          # Loading data frame
head(iris)                          # Head of example data
iris1 <- iris                       # Replicate example data
library(qtl)
library(qtl)
library(qtlcharts)
knitr::opts_chunk$set(fig.width=8, fig.height=6, message=FALSE)
library(qtl)
library(qtlcharts)
knitr::opts_chunk$set(fig.width=8, fig.height=6, message=FALSE)
?read.cross
sug <- read.cross("csv", "https://rqtl.org", "sug.csv",
genotypes=c("CC", "CB", "BB"), alleles=c("C", "B"))
summary(sug)
head(sug$pheno)
nind(sug)    # No. individuals
nphe(sug)    # No. phenotypes
nchr(sug)    # No. chromosomes
totmar(sug)  # Total markers
nmar(sug)    # No. markers on each chromosome
plot(sug)
nind(sug)    # No. individuals
nphe(sug)    # No. phenotypes
nchr(sug)    # No. chromosomes
totmar(sug)  # Total markers
nmar(sug)    # No. markers on each chromosome
#?plotMissing
plotMissing(sug, main="")
plotMissing(sug, main="", reorder=1)
#?plotMap
plotMap(sug)
plotMap(sug,show.marker.names=TRUE)
#?plotPheno
plotPheno(sug, pheno.col=1)
plotPheno(sug, pheno.col=2)
plotPheno(sug, pheno.col=3)
plotPheno(sug, pheno.col=4)
iplotMap(sug) #D7MIT31
iplotCorr(sug$pheno)
iplotCorr(sug$pheno, chartOpts=list(height=300, width=600, scatcolors="pink"))
